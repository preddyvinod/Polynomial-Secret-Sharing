// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Structure to store (x, y) pairs
typedef struct {
    int x;
    double y;
} Point;

// Function to decode value from a given base
int decode_base(const char *value, int base) {
    return (int)strtol(value, NULL, base);
}

// Manually parse JSON data to extract points for test case 1
Point* parse_json_data_testcase1(int *num_points) {
    *num_points = 4;  // Number of (x, y) pairs for test case 1
    Point *points = malloc(*num_points * sizeof(Point));

    // Hardcoded values based on test case 1 JSON data
    points[0].x = 1; points[0].y = decode_base("4", 10);       // x=1, y=4 in base 10
    points[1].x = 2; points[1].y = decode_base("111", 2);      // x=2, y=7 in base 2
    points[2].x = 3; points[2].y = decode_base("12", 10);      // x=3, y=12 in base 10
    points[3].x = 6; points[3].y = decode_base("213", 4);      // x=6, y=39 in base 4

    return points;
}

// Manually parse JSON data to extract points for test case 2
Point* parse_json_data_testcase2(int *num_points) {
    *num_points = 10;  // Number of (x, y) pairs for test case 2
    Point *points = malloc(*num_points * sizeof(Point));

    // Hardcoded values based on test case 2 JSON data
    points[0].x = 1; points[0].y = decode_base("13444211440455345511", 6);     // base 6
    points[1].x = 2; points[1].y = decode_base("aed7015a346d63", 15);          // base 15
    points[2].x = 3; points[2].y = decode_base("6aeeb69631c227c", 15);         // base 15
    points[3].x = 4; points[3].y = decode_base("e1b5e05623d881f", 16);         // base 16
    points[4].x = 5; points[4].y = decode_base("316034514573652620673", 8);    // base 8
    points[5].x = 6; points[5].y = decode_base("2122212201122002221120200210011020220200", 3); // base 3
    points[6].x = 7; points[6].y = decode_base("20120221122211000100210021102001201112121", 3); // base 3
    points[7].x = 8; points[7].y = decode_base("20220554335330240002224253", 6);             // base 6
    points[8].x = 9; points[8].y = decode_base("45153788322a1255483", 12);                  // base 12
    points[9].x = 10; points[9].y = decode_base("1101613130313526312514143", 7);            // base 7

    return points;
}

// Lagrange interpolation function to find the constant term (c)
double interpolate(Point *points, int num_points) {
    double constant_term = 0.0;

    for (int i = 0; i < num_points; i++) {
        double term = points[i].y;
        for (int j = 0; j < num_points; j++) {
            if (i != j) {
                term *= (0.0 - points[j].x) / (points[i].x - points[j].x);
            }
        }
        constant_term += term;
    }
    return constant_term;
}

// Main function
int main() {
    // Process Test Case 1
    int num_points1;
    Point *points1 = parse_json_data_testcase1(&num_points1);
    double constant_term1 = interpolate(points1, num_points1);
    printf("The constant term (secret) for Test Case 1 is: %.2f\n", constant_term1);

    // Process Test Case 2
    int num_points2;
    Point *points2 = parse_json_data_testcase2(&num_points2);
    double constant_term2 = interpolate(points2, num_points2);
    printf("The constant term (secret) for Test Case 2 is: %.2f\n", constant_term2);

    // Clean up
    free(points1);
    free(points2);

    return 0;
}
